/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Header that contains the code (mostly headers) for which Rust bindings
 * will be automatically generated by `bindgen`.
 *
 * Sorted alphabetically.
 */

#include <kunit/test.h>
#include <linux/cred.h>
#include <linux/errname.h>
#include <linux/ethtool.h>
#include <linux/file.h>
#include <linux/fs.h>
#include <linux/jiffies.h>
#include <linux/mdio.h>
#include <linux/phy.h>
#include <linux/pid_namespace.h>
#include <linux/refcount.h>
#include <linux/sched.h>
#include <linux/security.h>
#include <linux/slab.h>
#include <linux/wait.h>
#include <linux/workqueue.h>
#include <linux/vmalloc.h>
#include <linux/slab.h>
#include <linux/irq_work.h>
#include <linux/interrupt.h>
#include <linux/list.h>
#include <linux/tick.h>
#include <uapi/linux/sched/types.h>
#include <linux/irq_pipeline.h>
#include <net/net_namespace.h>
#include <linux/netdevice.h>
#include <uapi/linux/unistd.h>
#include <net/sock.h>
#include <linux/net.h>
#include <linux/bottom_half.h>
#include <uapi/linux/unistd.h>
#include <linux/capability.h>
#include <linux/anon_inodes.h>

/* `bindgen` gets confused at certain things. */
const size_t RUST_CONST_HELPER_ARCH_SLAB_MINALIGN = ARCH_SLAB_MINALIGN;
const gfp_t RUST_CONST_HELPER_GFP_KERNEL = GFP_KERNEL;
const gfp_t RUST_CONST_HELPER___GFP_ZERO = __GFP_ZERO;
