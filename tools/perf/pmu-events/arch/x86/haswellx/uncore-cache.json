[
    {
        "BriefDescription": "LLC prefetch misses for code reads. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.CODE_LLC_PREFETCH",
        "Filter": "filter_opc=0x191",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LLC prefetch misses for data reads. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.DATA_LLC_PREFETCH",
        "Filter": "filter_opc=0x192",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LLC misses - demand and prefetch data reads - excludes LLC prefetches. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.DATA_READ",
        "Filter": "filter_opc=0x182",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "MMIO reads. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.MMIO_READ",
        "Filter": "filter_opc=0x187,filter_nc=1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "MMIO writes. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.MMIO_WRITE",
        "Filter": "filter_opc=0x18f,filter_nc=1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "PCIe write misses (full cache line). Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.PCIE_NON_SNOOP_WRITE",
        "Filter": "filter_opc=0x1c8,filter_tid=0x3e",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LLC misses for PCIe read current. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.PCIE_READ",
        "Filter": "filter_opc=0x19e",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ItoM write misses (as part of fast string memcpy stores) + PCIe full line writes. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.PCIE_WRITE",
        "Filter": "filter_opc=0x1c8",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LLC prefetch misses for RFO. Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.RFO_LLC_PREFETCH",
        "Filter": "filter_opc=0x190",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LLC misses - Uncacheable reads (from cpu) . Derived from unc_c_tor_inserts.miss_opcode",
        "EventCode": "0x35",
        "EventName": "LLC_MISSES.UNCACHEABLE",
        "Filter": "filter_opc=0x187",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "L2 demand and L2 prefetch code references to LLC. Derived from unc_c_tor_inserts.opcode",
        "EventCode": "0x35",
        "EventName": "LLC_REFERENCES.CODE_LLC_PREFETCH",
        "Filter": "filter_opc=0x181",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "ScaleUnit": "64Bytes",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "PCIe writes (partial cache line). Derived from unc_c_tor_inserts.opcode",
        "EventCode": "0x35",
        "EventName": "LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE",
        "Filter": "filter_opc=0x180,filter_tid=0x3e",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "PCIe read current. Derived from unc_c_tor_inserts.opcode",
        "EventCode": "0x35",
        "EventName": "LLC_REFERENCES.PCIE_READ",
        "Filter": "filter_opc=0x19e",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "ScaleUnit": "64Bytes",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "PCIe write references (full cache line). Derived from unc_c_tor_inserts.opcode",
        "EventCode": "0x35",
        "EventName": "LLC_REFERENCES.PCIE_WRITE",
        "Filter": "filter_opc=0x1c8,filter_tid=0x3e",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "ScaleUnit": "64Bytes",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Streaming stores (full cache line). Derived from unc_c_tor_inserts.opcode",
        "EventCode": "0x35",
        "EventName": "LLC_REFERENCES.STREAMING_FULL",
        "Filter": "filter_opc=0x18c",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "ScaleUnit": "64Bytes",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Streaming stores (partial cache line). Derived from unc_c_tor_inserts.opcode",
        "EventCode": "0x35",
        "EventName": "LLC_REFERENCES.STREAMING_PARTIAL",
        "Filter": "filter_opc=0x18d",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "ScaleUnit": "64Bytes",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Bounce Control",
        "EventCode": "0xA",
        "EventName": "UNC_C_BOUNCE_CONTROL",
        "PerPkg": "1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Uncore Clocks",
        "EventName": "UNC_C_CLOCKTICKS",
        "PerPkg": "1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Counter 0 Occupancy",
        "EventCode": "0x1F",
        "EventName": "UNC_C_COUNTER0_OCCUPANCY",
        "PerPkg": "1",
        "PublicDescription": "Since occupancy counts can only be captured in the Cbo's 0 counter, this event allows a user to capture occupancy related information by filtering the Cb0 occupancy count captured in Counter 0.   The filtering available is found in the control register - threshold, invert and edge detect.   E.g. setting threshold to 1 can effectively monitor how many cycles the monitored queue has an entry.",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "FaST wire asserted",
        "EventCode": "0x9",
        "EventName": "UNC_C_FAST_ASSERTED",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles either the local distress or incoming distress signals are asserted.  Incoming distress includes both up and dn.",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "All LLC Misses (code+ data rd + data wr - including demand and prefetch)",
        "EventCode": "0x34",
        "EventName": "UNC_C_LLC_LOOKUP.ANY",
        "Filter": "filter_state=0x1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Filters for any transaction originating from the IPQ or IRQ.  This does not include lookups originating from the ISMQ.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x11",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cache Lookups; Data Read Request",
        "EventCode": "0x34",
        "EventName": "UNC_C_LLC_LOOKUP.DATA_READ",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Read transactions",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cache Lookups; Lookups that Match NID",
        "EventCode": "0x34",
        "EventName": "UNC_C_LLC_LOOKUP.NID",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Qualify one of the other subevents by the Target NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.   In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system.",
        "UMask": "0x41",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cache Lookups; Any Read Request",
        "EventCode": "0x34",
        "EventName": "UNC_C_LLC_LOOKUP.READ",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Read transactions",
        "UMask": "0x21",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cache Lookups; External Snoop Request",
        "EventCode": "0x34",
        "EventName": "UNC_C_LLC_LOOKUP.REMOTE_SNOOP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Filters for only snoop requests coming from the remote socket(s) through the IPQ.",
        "UMask": "0x9",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cache Lookups; Write Requests",
        "EventCode": "0x34",
        "EventName": "UNC_C_LLC_LOOKUP.WRITE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Writeback transactions from L2 to the LLC  This includes all write transactions -- both Cacheable and UC.",
        "UMask": "0x5",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Lines Victimized; Lines in E state",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.E_STATE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Lines Victimized",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.F_STATE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Lines Victimized; Lines in S State",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.I_STATE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Lines Victimized",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.MISS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "M line evictions from LLC (writebacks to memory)",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.M_STATE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Lines Victimized; Victimized Lines that Match NID",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.NID",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.; Qualify one of the other subevents by the Target NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.   In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Lines in S State",
        "EventCode": "0x37",
        "EventName": "UNC_C_LLC_VICTIMS.S_STATE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cbo Misc; DRd hitting non-M with raw CV=0",
        "EventCode": "0x39",
        "EventName": "UNC_C_MISC.CVZERO_PREFETCH_MISS",
        "PerPkg": "1",
        "PublicDescription": "Miscellaneous events in the Cbo.",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cbo Misc; Clean Victim with raw CV=0",
        "EventCode": "0x39",
        "EventName": "UNC_C_MISC.CVZERO_PREFETCH_VICTIM",
        "PerPkg": "1",
        "PublicDescription": "Miscellaneous events in the Cbo.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cbo Misc; RFO HitS",
        "EventCode": "0x39",
        "EventName": "UNC_C_MISC.RFO_HIT_S",
        "PerPkg": "1",
        "PublicDescription": "Miscellaneous events in the Cbo.; Number of times that an RFO hit in S state.  This is useful for determining if it might be good for a workload to use RspIWB instead of RspSWB.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cbo Misc; Silent Snoop Eviction",
        "EventCode": "0x39",
        "EventName": "UNC_C_MISC.RSPI_WAS_FSE",
        "PerPkg": "1",
        "PublicDescription": "Miscellaneous events in the Cbo.; Counts the number of times when a Snoop hit in FSE states and triggered a silent eviction.  This is useful because this information is lost in the PRE encodings.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cbo Misc",
        "EventCode": "0x39",
        "EventName": "UNC_C_MISC.STARTED",
        "PerPkg": "1",
        "PublicDescription": "Miscellaneous events in the Cbo.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Cbo Misc; Write Combining Aliasing",
        "EventCode": "0x39",
        "EventName": "UNC_C_MISC.WC_ALIASING",
        "PerPkg": "1",
        "PublicDescription": "Miscellaneous events in the Cbo.; Counts the number of times that a USWC write (WCIL(F)) transaction hit in the LLC in M state, triggering a WBMtoI followed by the USWC write.  This occurs when there is WC aliasing.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LRU Queue; LRU Age 0",
        "EventCode": "0x3C",
        "EventName": "UNC_C_QLRU.AGE0",
        "PerPkg": "1",
        "PublicDescription": "How often age was set to 0",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LRU Queue; LRU Age 1",
        "EventCode": "0x3C",
        "EventName": "UNC_C_QLRU.AGE1",
        "PerPkg": "1",
        "PublicDescription": "How often age was set to 1",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LRU Queue; LRU Age 2",
        "EventCode": "0x3C",
        "EventName": "UNC_C_QLRU.AGE2",
        "PerPkg": "1",
        "PublicDescription": "How often age was set to 2",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LRU Queue; LRU Age 3",
        "EventCode": "0x3C",
        "EventName": "UNC_C_QLRU.AGE3",
        "PerPkg": "1",
        "PublicDescription": "How often age was set to 3",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LRU Queue; LRU Bits Decremented",
        "EventCode": "0x3C",
        "EventName": "UNC_C_QLRU.LRU_DECREMENT",
        "PerPkg": "1",
        "PublicDescription": "How often all LRU bits were decremented by 1",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "LRU Queue; Non-0 Aged Victim",
        "EventCode": "0x3C",
        "EventName": "UNC_C_QLRU.VICTIM_NON_ZERO",
        "PerPkg": "1",
        "PublicDescription": "How often we picked a victim that had a non-zero age",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; All",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xf",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; Down",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xc",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; Down and Even",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.DOWN_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; Down and Odd",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.DOWN_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; Up",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; Up and Even",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.UP_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AD Ring In Use; Up and Odd",
        "EventCode": "0x1B",
        "EventName": "UNC_C_RING_AD_USED.UP_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; All",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xf",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; Down",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xc",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; Down and Even",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.DOWN_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; Down and Odd",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.DOWN_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; Up",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; Up and Even",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.UP_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "AK Ring In Use; Up and Odd",
        "EventCode": "0x1C",
        "EventName": "UNC_C_RING_AK_USED.UP_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Down",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xf",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Down",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0xc",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Down and Even",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.DOWN_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Down and Odd",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.DOWN_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Up",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Up and Even",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.UP_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Up and Odd",
        "EventCode": "0x1D",
        "EventName": "UNC_C_RING_BL_USED.UP_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; AD",
        "EventCode": "0x5",
        "EventName": "UNC_C_RING_BOUNCES.AD",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; AK",
        "EventCode": "0x5",
        "EventName": "UNC_C_RING_BOUNCES.AK",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; BL",
        "EventCode": "0x5",
        "EventName": "UNC_C_RING_BOUNCES.BL",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Number of LLC responses that bounced on the Ring.; Snoops of processor's cache.",
        "EventCode": "0x5",
        "EventName": "UNC_C_RING_BOUNCES.IV",
        "PerPkg": "1",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Any",
        "EventCode": "0x1E",
        "EventName": "UNC_C_RING_IV_USED.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity",
        "UMask": "0xf",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Any",
        "EventCode": "0x1E",
        "EventName": "UNC_C_RING_IV_USED.DN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity",
        "UMask": "0xc",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Down",
        "EventCode": "0x1E",
        "EventName": "UNC_C_RING_IV_USED.DOWN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters for Down polarity",
        "UMask": "0xcc",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BL Ring in Use; Any",
        "EventCode": "0x1E",
        "EventName": "UNC_C_RING_IV_USED.UP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "UNC_C_RING_SINK_STARVED.AD",
        "EventCode": "0x6",
        "EventName": "UNC_C_RING_SINK_STARVED.AD",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "UNC_C_RING_SINK_STARVED.AK",
        "EventCode": "0x6",
        "EventName": "UNC_C_RING_SINK_STARVED.AK",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "UNC_C_RING_SINK_STARVED.BL",
        "EventCode": "0x6",
        "EventName": "UNC_C_RING_SINK_STARVED.BL",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "UNC_C_RING_SINK_STARVED.IV",
        "EventCode": "0x6",
        "EventName": "UNC_C_RING_SINK_STARVED.IV",
        "PerPkg": "1",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Number of cycles the Cbo is actively throttling traffic onto the Ring in order to limit bounce traffic.",
        "EventCode": "0x7",
        "EventName": "UNC_C_RING_SRC_THRTL",
        "PerPkg": "1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Arbiter Blocking Cycles; IRQ",
        "EventCode": "0x12",
        "EventName": "UNC_C_RxR_EXT_STARVED.IPQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.; IPQ is externally startved and therefore we are blocking the IRQ.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Arbiter Blocking Cycles; IPQ",
        "EventCode": "0x12",
        "EventName": "UNC_C_RxR_EXT_STARVED.IRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.; IRQ is externally starved and therefore we are blocking the IPQ.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Arbiter Blocking Cycles; ISMQ_BID",
        "EventCode": "0x12",
        "EventName": "UNC_C_RxR_EXT_STARVED.ISMQ_BIDS",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.; Number of times that the ISMQ Bid.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Arbiter Blocking Cycles; PRQ",
        "EventCode": "0x12",
        "EventName": "UNC_C_RxR_EXT_STARVED.PRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Allocations; IPQ",
        "EventCode": "0x13",
        "EventName": "UNC_C_RxR_INSERTS.IPQ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of allocations per cycle into the specified Ingress queue.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Allocations; IRQ",
        "EventCode": "0x13",
        "EventName": "UNC_C_RxR_INSERTS.IRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of allocations per cycle into the specified Ingress queue.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Allocations; IRQ Rejected",
        "EventCode": "0x13",
        "EventName": "UNC_C_RxR_INSERTS.IRQ_REJ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of allocations per cycle into the specified Ingress queue.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Allocations; PRQ",
        "EventCode": "0x13",
        "EventName": "UNC_C_RxR_INSERTS.PRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of allocations per cycle into the specified Ingress queue.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Allocations; PRQ",
        "EventCode": "0x13",
        "EventName": "UNC_C_RxR_INSERTS.PRQ_REJ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of allocations per cycle into the specified Ingress queue.",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Internal Starvation Cycles; IPQ",
        "EventCode": "0x14",
        "EventName": "UNC_C_RxR_INT_STARVED.IPQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.; Cycles with the IPQ in Internal Starvation.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Internal Starvation Cycles; IRQ",
        "EventCode": "0x14",
        "EventName": "UNC_C_RxR_INT_STARVED.IRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.; Cycles with the IRQ in Internal Starvation.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Internal Starvation Cycles; ISMQ",
        "EventCode": "0x14",
        "EventName": "UNC_C_RxR_INT_STARVED.ISMQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.; Cycles with the ISMQ in Internal Starvation.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Internal Starvation Cycles; PRQ",
        "EventCode": "0x14",
        "EventName": "UNC_C_RxR_INT_STARVED.PRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Probe Queue Retries; Address Conflict",
        "EventCode": "0x31",
        "EventName": "UNC_C_RxR_IPQ_RETRY.ADDR_CONFLICT",
        "PerPkg": "1",
        "PublicDescription": "Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request form the IPQ was retried because of a TOR reject from an address conflicts.  Address conflicts out of the IPQ should be rare.  They will generally only occur if two different sockets are sending requests to the same address at the same time.  This is a true conflict case, unlike the IPQ Address Conflict which is commonly caused by prefetching characteristics.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Probe Queue Retries; Any Reject",
        "EventCode": "0x31",
        "EventName": "UNC_C_RxR_IPQ_RETRY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request form the IPQ was retried because of a TOR reject.  TOR rejects from the IPQ can be caused by the Egress being full or Address Conflicts.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Probe Queue Retries; No Egress Credits",
        "EventCode": "0x31",
        "EventName": "UNC_C_RxR_IPQ_RETRY.FULL",
        "PerPkg": "1",
        "PublicDescription": "Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request form the IPQ was retried because of a TOR reject from the Egress being full.  IPQ requests make use of the AD Egress for regular responses, the BL egress to forward data, and the AK egress to return credits.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Probe Queue Retries; No QPI Credits",
        "EventCode": "0x31",
        "EventName": "UNC_C_RxR_IPQ_RETRY.QPI_CREDITS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Probe Queue Retries; No AD Sbo Credits",
        "EventCode": "0x28",
        "EventName": "UNC_C_RxR_IPQ_RETRY2.AD_SBO",
        "PerPkg": "1",
        "PublicDescription": "Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request from the IPQ was retried because of it lacked credits to send an AD packet to the Sbo.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Probe Queue Retries; Target Node Filter",
        "EventCode": "0x28",
        "EventName": "UNC_C_RxR_IPQ_RETRY2.TARGET",
        "PerPkg": "1",
        "PublicDescription": "Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request from the IPQ was retried filtered by the Target NodeID as specified in the Cbox's Filter register.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; Address Conflict",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.ADDR_CONFLICT",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the IRQ was retried because of an address match in the TOR.  In order to maintain coherency, requests to the same address are not allowed to pass each other up in the Cbo.  Therefore, if there is an outstanding request to a given address, one cannot issue another request to that address until it is complete.  This comes up most commonly with prefetches.  Outstanding prefetches occasionally will not complete their memory fetch and a demand request to the same address will then sit in the IRQ and get retried until the prefetch fills the data into the LLC.  Therefore, it will not be uncommon to see this case in high bandwidth streaming workloads when the LLC Prefetcher in the core is enabled.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; Any Reject",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of IRQ retries that occur.  Requests from the IRQ are retried if they are rejected from the TOR pipeline for a variety of reasons.  Some of the most common reasons include if the Egress is full, there are no RTIDs, or there is a Physical Address match to another outstanding request.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; No Egress Credits",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the IRQ was retried because it failed to acquire an entry in the Egress.  The egress is the buffer that queues up for allocating onto the ring.  IRQ requests can make use of all four rings and all four Egresses.  If any of the queues that a given request needs to make use of are full, the request will be retried.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; No IIO Credits",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.IIO_CREDITS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a request attempted to acquire the NCS/NCB credit for sending messages on BL to the IIO.  There is a single credit in each CBo that is shared between the NCS and NCB message classes for sending transactions on the BL ring (such as read data) to the IIO.",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.NID",
        "PerPkg": "1",
        "PublicDescription": "Qualify one of the other subevents by a given RTID destination NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER1.nid.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; No QPI Credits",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.QPI_CREDITS",
        "PerPkg": "1",
        "PublicDescription": "Number of requests rejects because of lack of QPI Ingress credits.  These credits are required in order to send transactions to the QPI agent.  Please see the QPI_IGR_CREDITS events for more information.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; No RTIDs",
        "EventCode": "0x32",
        "EventName": "UNC_C_RxR_IRQ_RETRY.RTID",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that requests from the IRQ were retried because there were no RTIDs available.  RTIDs are required after a request misses the LLC and needs to send snoops and/or requests to memory.  If there are no RTIDs available, requests will queue up in the IRQ and retry until one becomes available.  Note that there are multiple RTID pools for the different sockets.  There may be cases where the local RTIDs are all used, but requests destined for remote memory can still acquire an RTID because there are remote RTIDs available.  This event does not provide any filtering for this case.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; No AD Sbo Credits",
        "EventCode": "0x29",
        "EventName": "UNC_C_RxR_IRQ_RETRY2.AD_SBO",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the IPQ was retried because of it lacked credits to send an AD packet to the Sbo.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; No BL Sbo Credits",
        "EventCode": "0x29",
        "EventName": "UNC_C_RxR_IRQ_RETRY2.BL_SBO",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the IPQ was retried because of it lacked credits to send an BL packet to the Sbo.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Request Queue Rejects; Target Node Filter",
        "EventCode": "0x29",
        "EventName": "UNC_C_RxR_IRQ_RETRY2.TARGET",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the IPQ was retried filtered by the Target NodeID as specified in the Cbox's Filter register.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries; Any Reject",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.ANY",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Counts the total number of times that a request from the ISMQ retried because of a TOR reject.  ISMQ requests generally will not need to retry (or at least ISMQ retries are less common than IRQ retries).  ISMQ requests will retry if they are not able to acquire a needed Egress credit to get onto the ring, or for cache evictions that need to acquire an RTID.  Most ISMQ requests already have an RTID, so eviction retries will be less common here.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries; No Egress Credits",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.FULL",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Counts the number of times that a request from the ISMQ retried because of a TOR reject caused by a lack of Egress credits. The egress is the buffer that queues up for allocating onto the ring.  If any of the Egress queues that a given request needs to make use of are full, the request will be retried.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries; No IIO Credits",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.IIO_CREDITS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Number of times a request attempted to acquire the NCS/NCB credit for sending messages on BL to the IIO.  There is a single credit in each CBo that is shared between the NCS and NCB message classes for sending transactions on the BL ring (such as read data) to the IIO.",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.NID",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Qualify one of the other subevents by a given RTID destination NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER1.nid.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries; No QPI Credits",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.QPI_CREDITS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries; No RTIDs",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.RTID",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Counts the number of times that a request from the ISMQ retried because of a TOR reject caused by no RTIDs.  M-state cache evictions are serviced through the ISMQ, and must acquire an RTID in order to write back to memory.  If no RTIDs are available, they will be retried.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Retries",
        "EventCode": "0x33",
        "EventName": "UNC_C_RxR_ISMQ_RETRY.WB_CREDITS",
        "PerPkg": "1",
        "PublicDescription": "Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Qualify one of the other subevents by a given RTID destination NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER1.nid.",
        "UMask": "0x80",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Request Queue Rejects; No AD Sbo Credits",
        "EventCode": "0x2A",
        "EventName": "UNC_C_RxR_ISMQ_RETRY2.AD_SBO",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the ISMQ was retried because of it lacked credits to send an AD packet to the Sbo.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Request Queue Rejects; No BL Sbo Credits",
        "EventCode": "0x2A",
        "EventName": "UNC_C_RxR_ISMQ_RETRY2.BL_SBO",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the ISMQ was retried because of it lacked credits to send an BL packet to the Sbo.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "ISMQ Request Queue Rejects; Target Node Filter",
        "EventCode": "0x2A",
        "EventName": "UNC_C_RxR_ISMQ_RETRY2.TARGET",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times that a request from the ISMQ was retried filtered by the Target NodeID as specified in the Cbox's Filter register.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Occupancy; IPQ",
        "EventCode": "0x11",
        "EventName": "UNC_C_RxR_OCCUPANCY.IPQ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of entries in the specified Ingress queue in each cycle.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Occupancy; IRQ",
        "EventCode": "0x11",
        "EventName": "UNC_C_RxR_OCCUPANCY.IRQ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of entries in the specified Ingress queue in each cycle.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Occupancy; IRQ Rejected",
        "EventCode": "0x11",
        "EventName": "UNC_C_RxR_OCCUPANCY.IRQ_REJ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of entries in the specified Ingress queue in each cycle.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Ingress Occupancy; PRQ Rejects",
        "EventCode": "0x11",
        "EventName": "UNC_C_RxR_OCCUPANCY.PRQ_REJ",
        "PerPkg": "1",
        "PublicDescription": "Counts number of entries in the specified Ingress queue in each cycle.",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "SBo Credits Acquired; For AD Ring",
        "EventCode": "0x3D",
        "EventName": "UNC_C_SBO_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo credits acquired in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "SBo Credits Acquired; For BL Ring",
        "EventCode": "0x3D",
        "EventName": "UNC_C_SBO_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo credits acquired in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "SBo Credits Occupancy; For AD Ring",
        "EventCode": "0x3E",
        "EventName": "UNC_C_SBO_CREDIT_OCCUPANCY.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo credits in use in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "SBo Credits Occupancy; For BL Ring",
        "EventCode": "0x3E",
        "EventName": "UNC_C_SBO_CREDIT_OCCUPANCY.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo credits in use in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; All",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions inserted into the TOR.    This includes requests that reside in the TOR for a short time, such as LLC Hits that do not need to snoop cores or requests that get rejected and have to be retried through one of the ingress queues.  The TOR is more commonly a bottleneck in skews with smaller core counts, where the ratio of RTIDs to TOR entries is larger.  Note that there are reserved TOR entries for various request types, so it is possible that a given request type be blocked with an occupancy that is less than 20.  Also note that generally requests will not be able to arbitrate into the TOR pipeline if there are no available TOR slots.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Evictions",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.EVICTION",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Eviction transactions inserted into the TOR.  Evictions can be quick, such as when the line is in the F, S, or E states and no core valid bits are set.  They can also be longer if either CV bits are set (so the cores need to be snooped) and/or if there is a HitM (in which case it is necessary to write the request out to memory).",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Local Memory",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions inserted into the TOR that are satisfied by locally HOMed memory.",
        "UMask": "0x28",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Local Memory - Opcode Matched",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.LOCAL_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent. There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions, satisfied by an opcode,  inserted into the TOR that are satisfied by locally HOMed memory.",
        "UMask": "0x21",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Misses to Local Memory",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.MISS_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that are satisfied by locally HOMed memory.",
        "UMask": "0x2a",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Misses to Local Memory - Opcode Matched",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.MISS_LOCAL_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions, satisfied by an opcode, inserted into the TOR that are satisfied by locally HOMed memory.",
        "UMask": "0x23",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Miss Opcode Match",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.MISS_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode.",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Misses to Remote Memory",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.MISS_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that are satisfied by remote caches or remote memory.",
        "UMask": "0x8a",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Misses to Remote Memory - Opcode Matched",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.MISS_REMOTE_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions, satisfied by an opcode,  inserted into the TOR that are satisfied by remote caches or remote memory.",
        "UMask": "0x83",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; NID Matched",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.NID_ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All NID matched (matches an RTID destination) transactions inserted into the TOR.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.  In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system.",
        "UMask": "0x48",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; NID Matched Evictions",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.NID_EVICTION",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; NID matched eviction transactions inserted into the TOR.",
        "UMask": "0x44",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; NID Matched Miss All",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.NID_MISS_ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All NID matched miss requests that were inserted into the TOR.",
        "UMask": "0x4a",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; NID and Opcode Matched Miss",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.NID_MISS_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match a NID and an opcode.",
        "UMask": "0x43",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; NID and Opcode Matched",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.NID_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match a NID and an opcode.",
        "UMask": "0x41",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; NID Matched Writebacks",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.NID_WB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; NID matched write transactions inserted into the TOR.",
        "UMask": "0x50",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Opcode Match",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Remote Memory",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions inserted into the TOR that are satisfied by remote caches or remote memory.",
        "UMask": "0x88",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Remote Memory - Opcode Matched",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.REMOTE_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions, satisfied by an opcode,  inserted into the TOR that are satisfied by remote caches or remote memory.",
        "UMask": "0x81",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Inserts; Writebacks",
        "EventCode": "0x35",
        "EventName": "UNC_C_TOR_INSERTS.WB",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Write transactions inserted into the TOR.   This does not include RFO, but actual operations that contain data being sent from the core.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Any",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.ALL",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); All valid TOR entries.  This includes requests that reside in the TOR for a short time, such as LLC Hits that do not need to snoop cores or requests that get rejected and have to be retried through one of the ingress queues.  The TOR is more commonly a bottleneck in skews with smaller core counts, where the ratio of RTIDs to TOR entries is larger.  Note that there are reserved TOR entries for various request types, so it is possible that a given request type be blocked with an occupancy that is less than 20.  Also note that generally requests will not be able to arbitrate into the TOR pipeline if there are no available TOR slots.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Evictions",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.EVICTION",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding eviction transactions in the TOR.  Evictions can be quick, such as when the line is in the F, S, or E states and no core valid bits are set.  They can also be longer if either CV bits are set (so the cores need to be snooped) and/or if there is a HitM (in which case it is necessary to write the request out to memory).",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Occupancy counter for LLC data reads (demand and L2 prefetch). Derived from unc_c_tor_occupancy.miss_opcode",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.LLC_DATA_READ",
        "Filter": "filter_opc=0x182",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries for miss transactions that match an opcode. This generally means that the request was sent to memory or MMIO.",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)",
        "UMask": "0x28",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Local Memory - Opcode Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.LOCAL_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding  transactions, satisfied by an opcode,  in the TOR that are satisfied by locally HOMed memory.",
        "UMask": "0x21",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Miss All",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.MISS_ALL",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding miss requests in the TOR.  'Miss' means the allocation requires an RTID.  This generally means that the request was sent to memory or MMIO.",
        "UMask": "0xa",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.MISS_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)",
        "UMask": "0x2a",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Misses to Local Memory - Opcode Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.MISS_LOCAL_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss transactions, satisfied by an opcode, in the TOR that are satisfied by locally HOMed memory.",
        "UMask": "0x23",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Miss Opcode Match",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.MISS_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries for miss transactions that match an opcode. This generally means that the request was sent to memory or MMIO.",
        "UMask": "0x3",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.MISS_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)",
        "UMask": "0x8a",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Misses to Remote Memory - Opcode Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.MISS_REMOTE_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss transactions, satisfied by an opcode, in the TOR that are satisfied by remote caches or remote memory.",
        "UMask": "0x83",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; NID Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.NID_ALL",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of NID matched outstanding requests in the TOR.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system.",
        "UMask": "0x48",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; NID Matched Evictions",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.NID_EVICTION",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding NID matched eviction transactions in the TOR .",
        "UMask": "0x44",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; NID Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.NID_MISS_ALL",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss requests in the TOR that match a NID.",
        "UMask": "0x4a",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; NID and Opcode Matched Miss",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.NID_MISS_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss requests in the TOR that match a NID and an opcode.",
        "UMask": "0x43",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; NID and Opcode Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.NID_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries that match a NID and an opcode.",
        "UMask": "0x41",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; NID Matched Writebacks",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.NID_WB",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); NID matched write transactions int the TOR.",
        "UMask": "0x50",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Opcode Match",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc).",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)",
        "UMask": "0x88",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Remote Memory - Opcode Matched",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.REMOTE_OPCODE",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding  transactions, satisfied by an opcode,  in the TOR that are satisfied by remote caches or remote memory.",
        "UMask": "0x81",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "TOR Occupancy; Writebacks",
        "EventCode": "0x36",
        "EventName": "UNC_C_TOR_OCCUPANCY.WB",
        "PerPkg": "1",
        "PublicDescription": "For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Write transactions in the TOR.   This does not include RFO, but actual operations that contain data being sent from the core.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Onto AD Ring",
        "EventCode": "0x4",
        "EventName": "UNC_C_TxR_ADS_USED.AD",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Onto AK Ring",
        "EventCode": "0x4",
        "EventName": "UNC_C_TxR_ADS_USED.AK",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Onto BL Ring",
        "EventCode": "0x4",
        "EventName": "UNC_C_TxR_ADS_USED.BL",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; AD - Cachebo",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.AD_CACHE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the AD ring.  Some example include outbound requests, snoop requests, and snoop responses.",
        "UMask": "0x1",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; AD - Corebo",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.AD_CORE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Corebo destined for the AD ring.  This is commonly used for outbound requests.",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; AK - Cachebo",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.AK_CACHE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the AK ring.  This is commonly used for credit returns and GO responses.",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; AK - Corebo",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.AK_CORE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Corebo destined for the AK ring.  This is commonly used for snoop responses coming from the core and destined for a Cachebo.",
        "UMask": "0x20",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; BL - Cacheno",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.BL_CACHE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the BL ring.  This is commonly used to send data from the cache to various destinations.",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; BL - Corebo",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.BL_CORE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Corebo destined for the BL ring.  This is commonly used for transferring writeback data to the cache.",
        "UMask": "0x40",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Egress Allocations; IV - Cachebo",
        "EventCode": "0x2",
        "EventName": "UNC_C_TxR_INSERTS.IV_CACHE",
        "PerPkg": "1",
        "PublicDescription": "Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the IV ring.  This is commonly used for snoops to the cores.",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Injection Starvation; Onto AD Ring (to core)",
        "EventCode": "0x3",
        "EventName": "UNC_C_TxR_STARVED.AD_CORE",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that the core AD egress spent in starvation",
        "UMask": "0x10",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Injection Starvation; Onto AK Ring",
        "EventCode": "0x3",
        "EventName": "UNC_C_TxR_STARVED.AK_BOTH",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that both AK egresses spent in starvation",
        "UMask": "0x2",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Injection Starvation; Onto BL Ring",
        "EventCode": "0x3",
        "EventName": "UNC_C_TxR_STARVED.BL_BOTH",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that both BL egresses spent in starvation",
        "UMask": "0x4",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "Injection Starvation; Onto IV Ring",
        "EventCode": "0x3",
        "EventName": "UNC_C_TxR_STARVED.IV",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that the cachebo IV egress spent in starvation",
        "UMask": "0x8",
        "Unit": "CBOX"
    },
    {
        "BriefDescription": "BT Cycles Not Empty",
        "EventCode": "0x42",
        "EventName": "UNC_H_BT_CYCLES_NE",
        "PerPkg": "1",
        "PublicDescription": "Cycles the Backup Tracker (BT) is not empty. The BT is the actual HOM tracker in IVT.",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BT to HT Not Issued; Incoming Data Hazard",
        "EventCode": "0x51",
        "EventName": "UNC_H_BT_TO_HT_NOT_ISSUED.INCOMING_BL_HAZARD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming BL data hazard",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BT to HT Not Issued; Incoming Snoop Hazard",
        "EventCode": "0x51",
        "EventName": "UNC_H_BT_TO_HT_NOT_ISSUED.INCOMING_SNP_HAZARD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming snoop hazard",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BT to HT Not Issued; Incoming Data Hazard",
        "EventCode": "0x51",
        "EventName": "UNC_H_BT_TO_HT_NOT_ISSUED.RSPACKCFLT_HAZARD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming BL data hazard",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BT to HT Not Issued; Incoming Data Hazard",
        "EventCode": "0x51",
        "EventName": "UNC_H_BT_TO_HT_NOT_ISSUED.WBMDATA_HAZARD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming BL data hazard",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Bypass; Not Taken",
        "EventCode": "0x14",
        "EventName": "UNC_H_BYPASS_IMC.NOT_TAKEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when the HA was able to bypass was attempted.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filted by when the bypass was taken and when it was not.; Filter for transactions that could not take the bypass.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Bypass; Taken",
        "EventCode": "0x14",
        "EventName": "UNC_H_BYPASS_IMC.TAKEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of times when the HA was able to bypass was attempted.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filted by when the bypass was taken and when it was not.; Filter for transactions that succeeded in taking the bypass.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "uclks",
        "EventName": "UNC_H_CLOCKTICKS",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of uclks in the HA.  This will be slightly different than the count in the Ubox because of enable/freeze delays.  The HA is on the other side of the die from the fixed Ubox uclk counter, so the drift could be somewhat larger than in units that are closer like the QPI Agent.",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Direct2Core Messages Sent",
        "EventCode": "0x11",
        "EventName": "UNC_H_DIRECT2CORE_COUNT",
        "PerPkg": "1",
        "PublicDescription": "Number of Direct2Core messages sent",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles when Direct2Core was Disabled",
        "EventCode": "0x12",
        "EventName": "UNC_H_DIRECT2CORE_CYCLES_DISABLED",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles in which Direct2Core was disabled",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Number of Reads that had Direct2Core Overridden",
        "EventCode": "0x13",
        "EventName": "UNC_H_DIRECT2CORE_TXN_OVERRIDE",
        "PerPkg": "1",
        "PublicDescription": "Number of Reads where Direct2Core overridden",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Directory Lat Opt Return",
        "EventCode": "0x41",
        "EventName": "UNC_H_DIRECTORY_LAT_OPT",
        "PerPkg": "1",
        "PublicDescription": "Directory Latency Optimization Data Return Path Taken. When directory mode is enabled and the directory returned for a read is Dir=I, then data can be returned using a faster path if certain conditions are met (credits, free pipeline, etc).",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Directory Lookups; Snoop Not Needed",
        "EventCode": "0xC",
        "EventName": "UNC_H_DIRECTORY_LOOKUP.NO_SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that looked up the directory.  Can be filtered by requests that had to snoop and those that did not have to.; Filters for transactions that did not have to send any snoops because the directory bit was clear.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Directory Lookups; Snoop Needed",
        "EventCode": "0xC",
        "EventName": "UNC_H_DIRECTORY_LOOKUP.SNP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that looked up the directory.  Can be filtered by requests that had to snoop and those that did not have to.; Filters for transactions that had to send one or more snoops because the directory bit was set.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Directory Updates; Any Directory Update",
        "EventCode": "0xD",
        "EventName": "UNC_H_DIRECTORY_UPDATE.ANY",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Directory Updates; Directory Clear",
        "EventCode": "0xD",
        "EventName": "UNC_H_DIRECTORY_UPDATE.CLEAR",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.; Filter for directory clears.  This occurs when snoops were sent and all returned with RspI.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Directory Updates; Directory Set",
        "EventCode": "0xD",
        "EventName": "UNC_H_DIRECTORY_UPDATE.SET",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.; Filter for directory sets.  This occurs when a remote read transaction requests memory, bringing it to a remote cache.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is AckCnfltWbI",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.ACKCNFLTWBI",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; All Requests",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.ALL",
        "PerPkg": "1",
        "UMask": "0xff",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; Allocations",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.ALLOCS",
        "PerPkg": "1",
        "UMask": "0x70",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; Allocations",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.EVICTS",
        "PerPkg": "1",
        "UMask": "0x42",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; HOM Requests",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.HOM",
        "PerPkg": "1",
        "UMask": "0xf",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; Invalidations",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.INVALS",
        "PerPkg": "1",
        "UMask": "0x26",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.READ_OR_INVITOE",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.RSP",
        "PerPkg": "1",
        "UMask": "0x80",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is RspIFwd or RspIFwdWb for a local request",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.RSPFWDI_LOCAL",
        "PerPkg": "1",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is RspIFwd or RspIFwdWb for a remote request",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.RSPFWDI_REMOTE",
        "PerPkg": "1",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is RsSFwd or RspSFwdWb",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.RSPFWDS",
        "PerPkg": "1",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is WbMtoE or WbMtoS",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.WBMTOE_OR_S",
        "PerPkg": "1",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of Hits in HitMe Cache; op is WbMtoI",
        "EventCode": "0x71",
        "EventName": "UNC_H_HITME_HIT.WBMTOI",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is AckCnfltWbI",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.ACKCNFLTWBI",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; All Requests",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.ALL",
        "PerPkg": "1",
        "UMask": "0xff",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; HOM Requests",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.HOM",
        "PerPkg": "1",
        "UMask": "0xf",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.READ_OR_INVITOE",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.RSP",
        "PerPkg": "1",
        "UMask": "0x80",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is RspIFwd or RspIFwdWb for a local request",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.RSPFWDI_LOCAL",
        "PerPkg": "1",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is RspIFwd or RspIFwdWb for a remote request",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.RSPFWDI_REMOTE",
        "PerPkg": "1",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is RsSFwd or RspSFwdWb",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.RSPFWDS",
        "PerPkg": "1",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is WbMtoE or WbMtoS",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.WBMTOE_OR_S",
        "PerPkg": "1",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Accumulates Number of PV bits set on HitMe Cache Hits; op is WbMtoI",
        "EventCode": "0x72",
        "EventName": "UNC_H_HITME_HIT_PV_BITS_SET.WBMTOI",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is AckCnfltWbI",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.ACKCNFLTWBI",
        "PerPkg": "1",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; All Requests",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.ALL",
        "PerPkg": "1",
        "UMask": "0xff",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; Allocations",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.ALLOCS",
        "PerPkg": "1",
        "UMask": "0x70",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; HOM Requests",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.HOM",
        "PerPkg": "1",
        "UMask": "0xf",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; Invalidations",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.INVALS",
        "PerPkg": "1",
        "UMask": "0x26",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.READ_OR_INVITOE",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.RSP",
        "PerPkg": "1",
        "UMask": "0x80",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is RspIFwd or RspIFwdWb for a local request",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.RSPFWDI_LOCAL",
        "PerPkg": "1",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is RspIFwd or RspIFwdWb for a remote request",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.RSPFWDI_REMOTE",
        "PerPkg": "1",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is RsSFwd or RspSFwdWb",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.RSPFWDS",
        "PerPkg": "1",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is WbMtoE or WbMtoS",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.WBMTOE_OR_S",
        "PerPkg": "1",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Counts Number of times HitMe Cache is accessed; op is WbMtoI",
        "EventCode": "0x70",
        "EventName": "UNC_H_HITME_LOOKUP.WBMTOI",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles without QPI Ingress Credits; AD to QPI Link 0",
        "EventCode": "0x22",
        "EventName": "UNC_H_IGR_NO_CREDIT_CYCLES.AD_QPI0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles without QPI Ingress Credits; AD to QPI Link 1",
        "EventCode": "0x22",
        "EventName": "UNC_H_IGR_NO_CREDIT_CYCLES.AD_QPI1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles without QPI Ingress Credits; BL to QPI Link 0",
        "EventCode": "0x22",
        "EventName": "UNC_H_IGR_NO_CREDIT_CYCLES.AD_QPI2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles without QPI Ingress Credits; BL to QPI Link 0",
        "EventCode": "0x22",
        "EventName": "UNC_H_IGR_NO_CREDIT_CYCLES.BL_QPI0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles without QPI Ingress Credits; BL to QPI Link 1",
        "EventCode": "0x22",
        "EventName": "UNC_H_IGR_NO_CREDIT_CYCLES.BL_QPI1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles without QPI Ingress Credits; BL to QPI Link 1",
        "EventCode": "0x22",
        "EventName": "UNC_H_IGR_NO_CREDIT_CYCLES.BL_QPI2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Normal Priority Reads Issued; Normal Priority",
        "EventCode": "0x17",
        "EventName": "UNC_H_IMC_READS.NORMAL",
        "PerPkg": "1",
        "PublicDescription": "Count of the number of reads issued to any of the memory controller channels.  This can be filtered by the priority of the reads.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Retry Events",
        "EventCode": "0x1E",
        "EventName": "UNC_H_IMC_RETRY",
        "PerPkg": "1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Full Line Writes Issued; All Writes",
        "EventCode": "0x1A",
        "EventName": "UNC_H_IMC_WRITES.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.",
        "UMask": "0xf",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Full Line Writes Issued; Full Line Non-ISOCH",
        "EventCode": "0x1A",
        "EventName": "UNC_H_IMC_WRITES.FULL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Full Line Writes Issued; ISOCH Full Line",
        "EventCode": "0x1A",
        "EventName": "UNC_H_IMC_WRITES.FULL_ISOCH",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Full Line Writes Issued; Partial Non-ISOCH",
        "EventCode": "0x1A",
        "EventName": "UNC_H_IMC_WRITES.PARTIAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA to iMC Full Line Writes Issued; ISOCH Partial",
        "EventCode": "0x1A",
        "EventName": "UNC_H_IMC_WRITES.PARTIAL_ISOCH",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Backpressure",
        "EventCode": "0x61",
        "EventName": "UNC_H_IOT_BACKPRESSURE.HUB",
        "PerPkg": "1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Backpressure",
        "EventCode": "0x61",
        "EventName": "UNC_H_IOT_BACKPRESSURE.SAT",
        "PerPkg": "1",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Lo",
        "EventCode": "0x64",
        "EventName": "UNC_H_IOT_CTS_EAST_LO.CTS0",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Lo",
        "EventCode": "0x64",
        "EventName": "UNC_H_IOT_CTS_EAST_LO.CTS1",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Hi",
        "EventCode": "0x65",
        "EventName": "UNC_H_IOT_CTS_HI.CTS2",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Hi",
        "EventCode": "0x65",
        "EventName": "UNC_H_IOT_CTS_HI.CTS3",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Lo",
        "EventCode": "0x62",
        "EventName": "UNC_H_IOT_CTS_WEST_LO.CTS0",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "IOT Common Trigger Sequencer - Lo",
        "EventCode": "0x62",
        "EventName": "UNC_H_IOT_CTS_WEST_LO.CTS1",
        "PerPkg": "1",
        "PublicDescription": "Debug Mask/Match Tie-Ins",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Snoop Broadcast; Cancelled",
        "EventCode": "0x53",
        "EventName": "UNC_H_OSB.CANCELLED",
        "PerPkg": "1",
        "PublicDescription": "Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.; OSB Snoop broadcast cancelled due to D2C or Other. OSB cancel is counted when OSB local read is not allowed even when the transaction in local InItoE. It also counts D2C OSB cancel, but also includes the cases were D2C was not set in the first place for the transaction coming from the ring.",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Snoop Broadcast; Local InvItoE",
        "EventCode": "0x53",
        "EventName": "UNC_H_OSB.INVITOE_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Snoop Broadcast; Local Reads",
        "EventCode": "0x53",
        "EventName": "UNC_H_OSB.READS_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Snoop Broadcast; Reads Local -  Useful",
        "EventCode": "0x53",
        "EventName": "UNC_H_OSB.READS_LOCAL_USEFUL",
        "PerPkg": "1",
        "PublicDescription": "Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Snoop Broadcast; Remote",
        "EventCode": "0x53",
        "EventName": "UNC_H_OSB.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Snoop Broadcast; Remote - Useful",
        "EventCode": "0x53",
        "EventName": "UNC_H_OSB.REMOTE_USEFUL",
        "PerPkg": "1",
        "PublicDescription": "Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Early Data Return; All",
        "EventCode": "0x54",
        "EventName": "UNC_H_OSB_EDR.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Early Data Return; Reads to Local  I",
        "EventCode": "0x54",
        "EventName": "UNC_H_OSB_EDR.READS_LOCAL_I",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Early Data Return; Reads to Local S",
        "EventCode": "0x54",
        "EventName": "UNC_H_OSB_EDR.READS_LOCAL_S",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Early Data Return; Reads to Remote I",
        "EventCode": "0x54",
        "EventName": "UNC_H_OSB_EDR.READS_REMOTE_I",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "OSB Early Data Return; Reads to Remote S",
        "EventCode": "0x54",
        "EventName": "UNC_H_OSB_EDR.READS_REMOTE_S",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Local InvItoEs",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.INVITOE_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only InvItoEs coming from the local socket.",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Remote InvItoEs",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.INVITOE_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only InvItoEs coming from remote sockets.",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Reads",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.READS",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; Incoming ead requests.  This is a good proxy for LLC Read Misses (including RFOs).",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Local Reads",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.READS_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only read requests coming from the local socket.  This is a good proxy for LLC Read Misses (including RFOs) from the local socket.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Remote Reads",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.READS_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only read requests coming from the remote socket.  This is a good proxy for LLC Read Misses (including RFOs) from the remote socket.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Writes",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.WRITES",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; Incoming write requests.",
        "UMask": "0xc",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Local Writes",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.WRITES_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only writes coming from the local socket.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Read and Write Requests; Remote Writes",
        "EventCode": "0x1",
        "EventName": "UNC_H_REQUESTS.WRITES_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only writes coming from remote sockets.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AD Ring in Use; Counterclockwise",
        "EventCode": "0x3E",
        "EventName": "UNC_H_RING_AD_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AD Ring in Use; Counterclockwise and Even",
        "EventCode": "0x3E",
        "EventName": "UNC_H_RING_AD_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AD Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x3E",
        "EventName": "UNC_H_RING_AD_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AD Ring in Use; Clockwise",
        "EventCode": "0x3E",
        "EventName": "UNC_H_RING_AD_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AD Ring in Use; Clockwise and Even",
        "EventCode": "0x3E",
        "EventName": "UNC_H_RING_AD_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AD Ring in Use; Clockwise and Odd",
        "EventCode": "0x3E",
        "EventName": "UNC_H_RING_AD_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AK Ring in Use; Counterclockwise",
        "EventCode": "0x3F",
        "EventName": "UNC_H_RING_AK_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AK Ring in Use; Counterclockwise and Even",
        "EventCode": "0x3F",
        "EventName": "UNC_H_RING_AK_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AK Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x3F",
        "EventName": "UNC_H_RING_AK_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AK Ring in Use; Clockwise",
        "EventCode": "0x3F",
        "EventName": "UNC_H_RING_AK_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AK Ring in Use; Clockwise and Even",
        "EventCode": "0x3F",
        "EventName": "UNC_H_RING_AK_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA AK Ring in Use; Clockwise and Odd",
        "EventCode": "0x3F",
        "EventName": "UNC_H_RING_AK_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA BL Ring in Use; Counterclockwise",
        "EventCode": "0x40",
        "EventName": "UNC_H_RING_BL_USED.CCW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0xc",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA BL Ring in Use; Counterclockwise and Even",
        "EventCode": "0x40",
        "EventName": "UNC_H_RING_BL_USED.CCW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA BL Ring in Use; Counterclockwise and Odd",
        "EventCode": "0x40",
        "EventName": "UNC_H_RING_BL_USED.CCW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA BL Ring in Use; Clockwise",
        "EventCode": "0x40",
        "EventName": "UNC_H_RING_BL_USED.CW",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA BL Ring in Use; Clockwise and Even",
        "EventCode": "0x40",
        "EventName": "UNC_H_RING_BL_USED.CW_EVEN",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA BL Ring in Use; Clockwise and Odd",
        "EventCode": "0x40",
        "EventName": "UNC_H_RING_BL_USED.CW_ODD",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Regular; Channel 0",
        "EventCode": "0x15",
        "EventName": "UNC_H_RPQ_CYCLES_NO_REG_CREDITS.CHN0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Regular; Channel 1",
        "EventCode": "0x15",
        "EventName": "UNC_H_RPQ_CYCLES_NO_REG_CREDITS.CHN1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Regular; Channel 2",
        "EventCode": "0x15",
        "EventName": "UNC_H_RPQ_CYCLES_NO_REG_CREDITS.CHN2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Regular; Channel 3",
        "EventCode": "0x15",
        "EventName": "UNC_H_RPQ_CYCLES_NO_REG_CREDITS.CHN3",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Special; Channel 0",
        "EventCode": "0x16",
        "EventName": "UNC_H_RPQ_CYCLES_NO_SPEC_CREDITS.CHN0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Special; Channel 1",
        "EventCode": "0x16",
        "EventName": "UNC_H_RPQ_CYCLES_NO_SPEC_CREDITS.CHN1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Special; Channel 2",
        "EventCode": "0x16",
        "EventName": "UNC_H_RPQ_CYCLES_NO_SPEC_CREDITS.CHN2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "iMC RPQ Credits Empty - Special; Channel 3",
        "EventCode": "0x16",
        "EventName": "UNC_H_RPQ_CYCLES_NO_SPEC_CREDITS.CHN3",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo0 Credits Acquired; For AD Ring",
        "EventCode": "0x68",
        "EventName": "UNC_H_SBO0_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits acquired in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo0 Credits Acquired; For BL Ring",
        "EventCode": "0x68",
        "EventName": "UNC_H_SBO0_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits acquired in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo0 Credits Occupancy; For AD Ring",
        "EventCode": "0x6A",
        "EventName": "UNC_H_SBO0_CREDIT_OCCUPANCY.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits in use in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo0 Credits Occupancy; For BL Ring",
        "EventCode": "0x6A",
        "EventName": "UNC_H_SBO0_CREDIT_OCCUPANCY.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 0 credits in use in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo1 Credits Acquired; For AD Ring",
        "EventCode": "0x69",
        "EventName": "UNC_H_SBO1_CREDITS_ACQUIRED.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits acquired in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo1 Credits Acquired; For BL Ring",
        "EventCode": "0x69",
        "EventName": "UNC_H_SBO1_CREDITS_ACQUIRED.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits acquired in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo1 Credits Occupancy; For AD Ring",
        "EventCode": "0x6B",
        "EventName": "UNC_H_SBO1_CREDIT_OCCUPANCY.AD",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits in use in a given cycle, per ring.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "SBo1 Credits Occupancy; For BL Ring",
        "EventCode": "0x6B",
        "EventName": "UNC_H_SBO1_CREDIT_OCCUPANCY.BL",
        "PerPkg": "1",
        "PublicDescription": "Number of Sbo 1 credits in use in a given cycle, per ring.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Data beat the Snoop Responses; Local Requests",
        "EventCode": "0xA",
        "EventName": "UNC_H_SNOOPS_RSP_AFTER_DATA.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of reads when the snoop was on the critical path to the data return.; This filter includes only requests coming from the local socket.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Data beat the Snoop Responses; Remote Requests",
        "EventCode": "0xA",
        "EventName": "UNC_H_SNOOPS_RSP_AFTER_DATA.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of reads when the snoop was on the critical path to the data return.; This filter includes only requests coming from remote sockets.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles with Snoops Outstanding; All Requests",
        "EventCode": "0x8",
        "EventName": "UNC_H_SNOOP_CYCLES_NE.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles when one or more snoops are outstanding.; Tracked for snoops from both local and remote sockets.",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles with Snoops Outstanding; Local Requests",
        "EventCode": "0x8",
        "EventName": "UNC_H_SNOOP_CYCLES_NE.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles when one or more snoops are outstanding.; This filter includes only requests coming from the local socket.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Cycles with Snoops Outstanding; Remote Requests",
        "EventCode": "0x8",
        "EventName": "UNC_H_SNOOP_CYCLES_NE.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts cycles when one or more snoops are outstanding.; This filter includes only requests coming from remote sockets.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Snoops Outstanding Accumulator; Local Requests",
        "EventCode": "0x9",
        "EventName": "UNC_H_SNOOP_OCCUPANCY.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of either the local HA tracker pool that have snoops pending in every cycle.    This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if an HT (HomeTracker) entry is available and this occupancy is decremented when all the snoop responses have returned.; This filter includes only requests coming from the local socket.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Snoops Outstanding Accumulator; Remote Requests",
        "EventCode": "0x9",
        "EventName": "UNC_H_SNOOP_OCCUPANCY.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of either the local HA tracker pool that have snoops pending in every cycle.    This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if an HT (HomeTracker) entry is available and this occupancy is decremented when all the snoop responses have returned.; This filter includes only requests coming from remote sockets.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received; RSPCNFLCT*",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSPCNFLCT",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoops responses of RspConflict.  This is returned when a snoop finds an existing outstanding transaction in a remote caching agent when it CAMs that caching agent.  This triggers conflict resolution hardware.  This covers both RspCnflct and RspCnflctWbI.",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received; RspI",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSPI",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoops responses of RspI.  RspI is returned when the remote cache does not have the data, or when the remote cache silently evicts data (such as when an RFO hits non-modified data).",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "M line forwarded from remote cache with no writeback to memory",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSPIFWD",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoop responses of RspIFwd.  This is returned when a remote caching agent forwards data and the requesting agent is able to acquire the data in E or M states.  This is commonly returned with RFO transactions.  It can be either a HitM or a HitFE.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Shared line response from remote cache",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSPS",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoop responses of RspS.  RspS is returned when a remote cache has data but is not forwarding it.  It is a way to let the requesting socket know that it cannot allocate the data in E state.  No data is sent with S RspS.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Shared line forwarded from remote cache",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSPSFWD",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for a snoop response of RspSFwd.  This is returned when a remote caching agent forwards data but holds on to its currently copy.  This is common for data and code reads that hit in a remote socket in E or F state.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "M line forwarded from remote cache along with writeback to memory",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSP_FWD_WB",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for a snoop response of Rsp*Fwd*WB.  This snoop response is only used in 4s systems.  It is used when a snoop HITM's in a remote caching agent and it directly forwards data to a requestor, and simultaneously returns data to the home to be written back to memory.",
        "ScaleUnit": "64Bytes",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received; Rsp*WB",
        "EventCode": "0x21",
        "EventName": "UNC_H_SNOOP_RESP.RSP_WB",
        "PerPkg": "1",
        "PublicDescription": "Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for a snoop response of RspIWB or RspSWB.  This is returned when a non-RFO request hits in M state.  Data and Code Reads can return either RspIWB or RspSWB depending on how the system has been configured.  InvItoE transactions will also return RspIWB because they must acquire ownership.",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; Other",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.OTHER",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for all other snoop responses.",
        "UMask": "0x80",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; RspCnflct",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPCNFLCT",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for snoops responses of RspConflict.  This is returned when a snoop finds an existing outstanding transaction in a remote caching agent when it CAMs that caching agent.  This triggers conflict resolution hardware.  This covers both RspCnflct and RspCnflctWbI.",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; RspI",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPI",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for snoops responses of RspI.  RspI is returned when the remote cache does not have the data, or when the remote cache silently evicts data (such as when an RFO hits non-modified data).",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; RspIFwd",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPIFWD",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for snoop responses of RspIFwd.  This is returned when a remote caching agent forwards data and the requesting agent is able to acquire the data in E or M states.  This is commonly returned with RFO transactions.  It can be either a HitM or a HitFE.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; RspS",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPS",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for snoop responses of RspS.  RspS is returned when a remote cache has data but is not forwarding it.  It is a way to let the requesting socket know that it cannot allocate the data in E state.  No data is sent with S RspS.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; RspSFwd",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPSFWD",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for a snoop response of RspSFwd.  This is returned when a remote caching agent forwards data but holds on to its currently copy.  This is common for data and code reads that hit in a remote socket in E or F state.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; Rsp*FWD*WB",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPxFWDxWB",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for a snoop response of Rsp*Fwd*WB.  This snoop response is only used in 4s systems.  It is used when a snoop HITM's in a remote caching agent and it directly forwards data to a requestor, and simultaneously returns data to the home to be written back to memory.",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Snoop Responses Received Local; Rsp*WB",
        "EventCode": "0x60",
        "EventName": "UNC_H_SNP_RESP_RECV_LOCAL.RSPxWB",
        "PerPkg": "1",
        "PublicDescription": "Number of snoop responses received for a Local  request; Filters for a snoop response of RspIWB or RspSWB.  This is returned when a non-RFO request hits in M state.  Data and Code Reads can return either RspIWB or RspSWB depending on how the system has been configured.  InvItoE transactions will also return RspIWB because they must acquire ownership.",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo0, AD Ring",
        "EventCode": "0x6C",
        "EventName": "UNC_H_STALL_NO_SBO_CREDIT.SBO0_AD",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo0, BL Ring",
        "EventCode": "0x6C",
        "EventName": "UNC_H_STALL_NO_SBO_CREDIT.SBO0_BL",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo1, AD Ring",
        "EventCode": "0x6C",
        "EventName": "UNC_H_STALL_NO_SBO_CREDIT.SBO1_AD",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Stall on No Sbo Credits; For SBo1, BL Ring",
        "EventCode": "0x6C",
        "EventName": "UNC_H_STALL_NO_SBO_CREDIT.SBO1_BL",
        "PerPkg": "1",
        "PublicDescription": "Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 0",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 1",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 2",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 2",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 3",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION3",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 3",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 4",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION4",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 4",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 5",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION5",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 5",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 6",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION6",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 6",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 0; TAD Region 7",
        "EventCode": "0x1B",
        "EventName": "UNC_H_TAD_REQUESTS_G0.REGION7",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 7",
        "UMask": "0x80",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 1; TAD Region 10",
        "EventCode": "0x1C",
        "EventName": "UNC_H_TAD_REQUESTS_G1.REGION10",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 10",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 1; TAD Region 11",
        "EventCode": "0x1C",
        "EventName": "UNC_H_TAD_REQUESTS_G1.REGION11",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 11",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 1; TAD Region 8",
        "EventCode": "0x1C",
        "EventName": "UNC_H_TAD_REQUESTS_G1.REGION8",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 8",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA Requests to a TAD Region - Group 1; TAD Region 9",
        "EventCode": "0x1C",
        "EventName": "UNC_H_TAD_REQUESTS_G1.REGION9",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 9",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Cycles Full; Cycles Completely Used",
        "EventCode": "0x2",
        "EventName": "UNC_H_TRACKER_CYCLES_FULL.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the local HA tracker pool is completely used.  This can be used with edge detect to identify the number of situations when the pool became fully utilized.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, the system could be starved for RTIDs but not fill up the HA trackers.  HA trackers are allocated as soon as a request enters the HA and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; Counts the number of cycles when the HA tracker pool (HT) is completely used including reserved HT entries.  It will not return valid count when BT is disabled.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Cycles Full; Cycles GP Completely Used",
        "EventCode": "0x2",
        "EventName": "UNC_H_TRACKER_CYCLES_FULL.GP",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the local HA tracker pool is completely used.  This can be used with edge detect to identify the number of situations when the pool became fully utilized.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, the system could be starved for RTIDs but not fill up the HA trackers.  HA trackers are allocated as soon as a request enters the HA and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; Counts the number of cycles when the general purpose (GP) HA tracker pool (HT) is completely used.  It will not return valid count when BT is disabled.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Cycles Not Empty; All Requests",
        "EventCode": "0x3",
        "EventName": "UNC_H_TRACKER_CYCLES_NE.ALL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the local HA tracker pool is not empty.  This can be used with edge detect to identify the number of situations when the pool became empty.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, this buffer could be completely empty, but there may still be credits in use by the CBos.  This stat can be used in conjunction with the occupancy accumulation stat in order to calculate average queue occpancy.  HA trackers are allocated as soon as a request enters the HA if an HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; Requests coming from both local and remote sockets.",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Cycles Not Empty; Local Requests",
        "EventCode": "0x3",
        "EventName": "UNC_H_TRACKER_CYCLES_NE.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the local HA tracker pool is not empty.  This can be used with edge detect to identify the number of situations when the pool became empty.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, this buffer could be completely empty, but there may still be credits in use by the CBos.  This stat can be used in conjunction with the occupancy accumulation stat in order to calculate average queue occpancy.  HA trackers are allocated as soon as a request enters the HA if an HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; This filter includes only requests coming from the local socket.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Cycles Not Empty; Remote Requests",
        "EventCode": "0x3",
        "EventName": "UNC_H_TRACKER_CYCLES_NE.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when the local HA tracker pool is not empty.  This can be used with edge detect to identify the number of situations when the pool became empty.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, this buffer could be completely empty, but there may still be credits in use by the CBos.  This stat can be used in conjunction with the occupancy accumulation stat in order to calculate average queue occpancy.  HA trackers are allocated as soon as a request enters the HA if an HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; This filter includes only requests coming from remote sockets.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Occupancy Accumulator; Local InvItoE Requests",
        "EventCode": "0x4",
        "EventName": "UNC_H_TRACKER_OCCUPANCY.INVITOE_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.",
        "UMask": "0x40",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Occupancy Accumulator; Remote InvItoE Requests",
        "EventCode": "0x4",
        "EventName": "UNC_H_TRACKER_OCCUPANCY.INVITOE_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.",
        "UMask": "0x80",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Occupancy Accumulator; Local Read Requests",
        "EventCode": "0x4",
        "EventName": "UNC_H_TRACKER_OCCUPANCY.READS_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Occupancy Accumulator; Remote Read Requests",
        "EventCode": "0x4",
        "EventName": "UNC_H_TRACKER_OCCUPANCY.READS_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Occupancy Accumulator; Local Write Requests",
        "EventCode": "0x4",
        "EventName": "UNC_H_TRACKER_OCCUPANCY.WRITES_LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.",
        "UMask": "0x10",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Tracker Occupancy Accumulator; Remote Write Requests",
        "EventCode": "0x4",
        "EventName": "UNC_H_TRACKER_OCCUPANCY.WRITES_REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.",
        "UMask": "0x20",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Data Pending Occupancy Accumulator; Local Requests",
        "EventCode": "0x5",
        "EventName": "UNC_H_TRACKER_PENDING_OCCUPANCY.LOCAL",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of transactions that have data from the memory controller until they get scheduled to the Egress.  This can be used to calculate the queuing latency for two things.  (1) If the system is waiting for snoops, this will increase.  (2) If the system can't schedule to the Egress because of either (a) Egress Credits or (b) QPI BL IGR credits for remote requests.; This filter includes only requests coming from the local socket.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Data Pending Occupancy Accumulator; Remote Requests",
        "EventCode": "0x5",
        "EventName": "UNC_H_TRACKER_PENDING_OCCUPANCY.REMOTE",
        "PerPkg": "1",
        "PublicDescription": "Accumulates the number of transactions that have data from the memory controller until they get scheduled to the Egress.  This can be used to calculate the queuing latency for two things.  (1) If the system is waiting for snoops, this will increase.  (2) If the system can't schedule to the Egress because of either (a) Egress Credits or (b) QPI BL IGR credits for remote requests.; This filter includes only requests coming from remote sockets.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Outbound NDR Ring Transactions; Non-data Responses",
        "EventCode": "0xF",
        "EventName": "UNC_H_TxR_AD.HOM",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of outbound transactions on the AD ring.  This can be filtered by the NDR and SNP message classes.  See the filter descriptions for more details.; Filter for outbound NDR transactions sent on the AD ring.  NDR stands for non-data response and is generally used for completions that do not include data.  AD NDR is used for transactions to remote sockets.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Full; All",
        "EventCode": "0x2A",
        "EventName": "UNC_H_TxR_AD_CYCLES_FULL.ALL",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Full; Cycles full from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Full; Scheduler 0",
        "EventCode": "0x2A",
        "EventName": "UNC_H_TxR_AD_CYCLES_FULL.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Full; Filter for cycles full  from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Full; Scheduler 1",
        "EventCode": "0x2A",
        "EventName": "UNC_H_TxR_AD_CYCLES_FULL.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Full; Filter for cycles full  from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Not Empty; All",
        "EventCode": "0x29",
        "EventName": "UNC_H_TxR_AD_CYCLES_NE.ALL",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Not Empty; Cycles full from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Not Empty; Scheduler 0",
        "EventCode": "0x29",
        "EventName": "UNC_H_TxR_AD_CYCLES_NE.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Not Empty; Filter for cycles not empty  from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Not Empty; Scheduler 1",
        "EventCode": "0x29",
        "EventName": "UNC_H_TxR_AD_CYCLES_NE.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Not Empty; Filter for cycles not empty from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Allocations; All",
        "EventCode": "0x27",
        "EventName": "UNC_H_TxR_AD_INSERTS.ALL",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Allocations; Allocations from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Allocations; Scheduler 0",
        "EventCode": "0x27",
        "EventName": "UNC_H_TxR_AD_INSERTS.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Allocations; Filter for allocations from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AD Egress Allocations; Scheduler 1",
        "EventCode": "0x27",
        "EventName": "UNC_H_TxR_AD_INSERTS.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "AD Egress Allocations; Filter for allocations from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Full; All",
        "EventCode": "0x32",
        "EventName": "UNC_H_TxR_AK_CYCLES_FULL.ALL",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Full; Cycles full from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Full; Scheduler 0",
        "EventCode": "0x32",
        "EventName": "UNC_H_TxR_AK_CYCLES_FULL.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Full; Filter for cycles full  from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Full; Scheduler 1",
        "EventCode": "0x32",
        "EventName": "UNC_H_TxR_AK_CYCLES_FULL.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Full; Filter for cycles full  from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Not Empty; All",
        "EventCode": "0x31",
        "EventName": "UNC_H_TxR_AK_CYCLES_NE.ALL",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Not Empty; Cycles full from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Not Empty; Scheduler 0",
        "EventCode": "0x31",
        "EventName": "UNC_H_TxR_AK_CYCLES_NE.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Not Empty; Filter for cycles not empty  from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Not Empty; Scheduler 1",
        "EventCode": "0x31",
        "EventName": "UNC_H_TxR_AK_CYCLES_NE.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Not Empty; Filter for cycles not empty from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Allocations; All",
        "EventCode": "0x2F",
        "EventName": "UNC_H_TxR_AK_INSERTS.ALL",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Allocations; Allocations from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Allocations; Scheduler 0",
        "EventCode": "0x2F",
        "EventName": "UNC_H_TxR_AK_INSERTS.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Allocations; Filter for allocations from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "AK Egress Allocations; Scheduler 1",
        "EventCode": "0x2F",
        "EventName": "UNC_H_TxR_AK_INSERTS.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "AK Egress Allocations; Filter for allocations from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Outbound DRS Ring Transactions to Cache; Data to Cache",
        "EventCode": "0x10",
        "EventName": "UNC_H_TxR_BL.DRS_CACHE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.; Filter for data being sent to the cache.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Outbound DRS Ring Transactions to Cache; Data to Core",
        "EventCode": "0x10",
        "EventName": "UNC_H_TxR_BL.DRS_CORE",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.; Filter for data being sent directly to the requesting core.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Outbound DRS Ring Transactions to Cache; Data to QPI",
        "EventCode": "0x10",
        "EventName": "UNC_H_TxR_BL.DRS_QPI",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.; Filter for data being sent to a remote socket over QPI.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Full; All",
        "EventCode": "0x36",
        "EventName": "UNC_H_TxR_BL_CYCLES_FULL.ALL",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Full; Cycles full from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Full; Scheduler 0",
        "EventCode": "0x36",
        "EventName": "UNC_H_TxR_BL_CYCLES_FULL.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Full; Filter for cycles full  from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Full; Scheduler 1",
        "EventCode": "0x36",
        "EventName": "UNC_H_TxR_BL_CYCLES_FULL.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Full; Filter for cycles full  from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Not Empty; All",
        "EventCode": "0x35",
        "EventName": "UNC_H_TxR_BL_CYCLES_NE.ALL",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Not Empty; Cycles full from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Not Empty; Scheduler 0",
        "EventCode": "0x35",
        "EventName": "UNC_H_TxR_BL_CYCLES_NE.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Not Empty; Filter for cycles not empty  from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Not Empty; Scheduler 1",
        "EventCode": "0x35",
        "EventName": "UNC_H_TxR_BL_CYCLES_NE.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Not Empty; Filter for cycles not empty from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Allocations; All",
        "EventCode": "0x33",
        "EventName": "UNC_H_TxR_BL_INSERTS.ALL",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Allocations; Allocations from both schedulers",
        "UMask": "0x3",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Allocations; Scheduler 0",
        "EventCode": "0x33",
        "EventName": "UNC_H_TxR_BL_INSERTS.SCHED0",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Allocations; Filter for allocations from scheduler bank 0",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "BL Egress Allocations; Scheduler 1",
        "EventCode": "0x33",
        "EventName": "UNC_H_TxR_BL_INSERTS.SCHED1",
        "PerPkg": "1",
        "PublicDescription": "BL Egress Allocations; Filter for allocations from scheduler bank 1",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Injection Starvation; For AK Ring",
        "EventCode": "0x6D",
        "EventName": "UNC_H_TxR_STARVED.AK",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "Injection Starvation; For BL Ring",
        "EventCode": "0x6D",
        "EventName": "UNC_H_TxR_STARVED.BL",
        "PerPkg": "1",
        "PublicDescription": "Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Regular; Channel 0",
        "EventCode": "0x18",
        "EventName": "UNC_H_WPQ_CYCLES_NO_REG_CREDITS.CHN0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Regular; Channel 1",
        "EventCode": "0x18",
        "EventName": "UNC_H_WPQ_CYCLES_NO_REG_CREDITS.CHN1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Regular; Channel 2",
        "EventCode": "0x18",
        "EventName": "UNC_H_WPQ_CYCLES_NO_REG_CREDITS.CHN2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Regular; Channel 3",
        "EventCode": "0x18",
        "EventName": "UNC_H_WPQ_CYCLES_NO_REG_CREDITS.CHN3",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only.",
        "UMask": "0x8",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Special; Channel 0",
        "EventCode": "0x19",
        "EventName": "UNC_H_WPQ_CYCLES_NO_SPEC_CREDITS.CHN0",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only.",
        "UMask": "0x1",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Special; Channel 1",
        "EventCode": "0x19",
        "EventName": "UNC_H_WPQ_CYCLES_NO_SPEC_CREDITS.CHN1",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only.",
        "UMask": "0x2",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Special; Channel 2",
        "EventCode": "0x19",
        "EventName": "UNC_H_WPQ_CYCLES_NO_SPEC_CREDITS.CHN2",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only.",
        "UMask": "0x4",
        "Unit": "HA"
    },
    {
        "BriefDescription": "HA iMC CHN0 WPQ Credits Empty - Special; Channel 3",
        "EventCode": "0x19",
        "EventName": "UNC_H_WPQ_CYCLES_NO_SPEC_CREDITS.CHN3",
        "PerPkg": "1",
        "PublicDescription": "Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only.",
        "UMask": "0x8",
        "Unit": "HA"
    }
]
